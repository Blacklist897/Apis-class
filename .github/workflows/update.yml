# Many thanks to PsychonautStation
name: Mirror bot

on:
  workflow_dispatch:
  schedule:
    - cron: '0 14 * * 5'

permissions:
  contents: write
  pull-requests: write

env:
  pr_title: '[MDB IGNORE] [IDB IGNORE] Upstream mirror'
  pr_body: This is an automated pull request to merge the latest changes from the upstream repository.
  pr_branch: mirror
  pr_label: mirror
  upstream_repo: shiptest-ss13/Shiptest
  upstream_branch: master
  commiter_name: bot-with-a-pen[bot]
  commiter_email: 201532216+bot-with-a-pen[bot]@users.noreply.github.com
  tracked_files: SQL/database_changelog.md,config/,tools/tgs_scripts/,tools/autowiki/,tools/test_merge_bot/,dependencies.sh

jobs:
  mirror:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch upstream remote
        run: |
          git remote add upstream "https://github.com/$upstream_repo.git"
          git fetch upstream $upstream_branch

      - name: Check tracked files
        id: tracking
        run: |
          $files = @()
          $tracked = $Env:tracked_files -split ","  # Split the tracked files properly

          foreach ($file in $tracked) {
            if ($file.EndsWith("/")) {
              $changes = git rev-list --count HEAD..FETCH_HEAD -- $file
              if ($changes -ne 0) {
                $diff_files = git diff --name-only FETCH_HEAD -- $file
                foreach ($changed_file in $diff_files) {
                  $ahead = git rev-list --count HEAD..FETCH_HEAD -- $changed_file
                  if ($ahead -ne 0) { $files += "$changed_file - $ahead commits" }
                }
              }
            } else {
              $ahead = git rev-list --count HEAD..FETCH_HEAD -- $file
              if ($ahead -ne 0) { $files += "$file - $ahead commits" }
            }
          }

          if ($files.Count -ne 0) {
            echo "tracked_files<<EOF" >> $Env:GITHUB_OUTPUT
            foreach ($f in $files) { echo "- $f" >> $Env:GITHUB_OUTPUT }
            echo "EOF" >> $Env:GITHUB_OUTPUT
          } else {
            echo "tracked_files=No tracked file changes" >> $Env:GITHUB_OUTPUT
          }
        shell: pwsh

      - name: Merge upstream branch
        run: |
          git config user.name "$commiter_name"
          git config user.email "$commiter_email"
          git merge FETCH_HEAD --no-commit --no-ff
        continue-on-error: true

      - name: Commit with conflicts
        id: commit
        run: |
          $files = (git diff --name-only --diff-filter=U)

          if ($files.Length -ne 0) {
            echo "The following files have conflicts:" >> $Env:GITHUB_OUTPUT
            foreach ($file in $files) {
              echo "- [ ] $file" >> $Env:GITHUB_OUTPUT
            }
          } else {
            git commit --all --no-edit
          }
        shell: pwsh

      - name: Generate App Token
        id: app-token-generation
        uses: actions/create-github-app-token@v1
        if: env.APP_PRIVATE_KEY != '' && env.APP_ID != ''
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
        env:
          APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}
          APP_ID: ${{ secrets.APP_ID }}

      - name: Create new pull request
        uses: peter-evans/create-pull-request@v3
        id: create-pull-request
        with:
          token: ${{ steps.app-token-generation.outputs.token || secrets.GITHUB_TOKEN }}
          author: ${{ env.commiter_name }} <${{ env.commiter_email }}>
          branch: ${{ env.pr_branch }}
          branch-suffix: short-commit-hash
          delete-branch: true
          title: ${{ env.pr_title }}
          body: ${{ env.pr_body }}${{ steps.commit.outputs.conflicts }}${{ steps.commit.outputs.tracked_files }}
          labels: ${{ env.pr_label }}

      - name: Close previous pull request(s)
        run: |
          $query = "repo:$Env:GITHUB_REPOSITORY is:pr is:open label:$Env:pr_label"
          $pr_number = ${{ steps.create-pull-request.outputs.pull-request-number }}
          foreach ($_ in $(gh api -X GET search/issues -F q="$query" --jq '.items[].number')) {
            if ($_ -ne $pr_number) {
              gh pr close $_ -R $Env:GITHUB_REPOSITORY -d -c "Superseded by #$pr_number."
            }
          }
        env:
          GH_TOKEN: ${{ steps.app-token-generation.outputs.token || secrets.GITHUB_TOKEN }}
        shell: pwsh
